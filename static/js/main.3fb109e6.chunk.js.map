{"version":3,"sources":["components/Filter/Filter.module.scss","components/ContactItem/ContactItem.module.scss","components/ContactList/ContactList.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","a","get","data","name","number","map","item","toLowerCase","includes","alert","contact","post","contactId","delete","getFilter","state","contacts","filter","getContacts","items","getVisibleContacts","createSelector","normalizedFilter","itemsReducer","createReducer","payload","id","_","filterReducer","contactsReducer","combineReducers","INITIAL_STATE","ContactForm","handleChange","e","currentTarget","value","setState","prev","handleSubmit","preventDefault","props","onSubmit","reset","this","className","styles","contactForm","label","input","type","placeholder","pattern","title","required","onChange","addContactBtn","Component","connect","contactsOperations","contactsSelectors","target","onDelete","contactItem","phoneNumber","contactDeleteBtn","onClick","contactsList","App","fetchContacts","contactsOprations","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,wB,mBCAxFD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,iBAAmB,sCAAsC,KAAO,4B,mBCAhLD,EAAOC,QAAU,CAAC,aAAe,oC,8NCCpBC,EAAsBC,YAAa,gCACnCC,EAAsBD,YAAa,gCACnCE,EAAoBF,YAAa,8BACjCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAC/BM,EAAuBN,YAClC,iCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAElCS,EAAeT,YAAa,mBCFzCU,IAAMC,SAASC,QAAU,wBAyBzB,I,EAqCe,EArCO,yDAAM,WAAMC,GAAN,iBAAAC,EAAA,6DAC1BD,EAASd,KADiB,kBAGDW,IAAMK,IAAI,aAHT,gBAGhBC,EAHgB,EAGhBA,KACRH,EAASZ,EAAoBe,IAJL,gDAMxBH,EAASX,EAAkB,EAAD,KANF,yDAAN,uDAqCP,EA3Bb,SAAC,GAAD,IAAGe,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,8CACA,WAAML,GAAN,qBAAAC,EAAA,sEACyBJ,IAAMK,IAAI,aADnC,sBACUC,KAEDG,KAAI,SAAAC,GAAI,OAAIA,EAAKH,KAAKI,iBAAeC,SAASL,EAAKI,eAH5D,uBAKIE,MAAM,GAAD,OAAIN,EAAJ,4BALT,iCAQQO,EAAU,CAAEP,OAAMC,UACxBL,EAASV,KATX,mBAW2BO,IAAMe,KAAK,YAAaD,GAXnD,iBAWYR,EAXZ,EAWYA,KACRH,EAAST,EAAkBY,IAZ/B,kDAcIH,EAASR,EAAgB,EAAD,KAd5B,0DADA,uDA2Ba,EATO,SAAAqB,GAAS,8CAAI,WAAMb,GAAN,SAAAC,EAAA,6DACjCD,EAASP,KADwB,kBAGzBI,IAAMiB,OAAN,oBAA0BD,IAHD,OAI/Bb,EAASN,EAAqBmB,IAJC,gDAM/Bb,EAASL,EAAmB,EAAD,KANI,yDAAJ,uD,QCjEzBoB,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QACpCC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAY7B,GAAEL,YAAWI,cAAaE,mBAVdC,YACzB,CAACH,EAAaJ,IACd,SAACE,EAAUC,GACT,IAAMK,EAAmBL,EAAOV,cAChC,OAAOS,EAASC,QAAO,SAAAP,GAAO,OAC5BA,EAAQP,KAAKI,cAAcC,SAASc,U,eCDpCC,EAAeC,YAAc,IAAD,mBAC/BlC,GAAoB,SAACyB,EAAD,OAAUU,EAAV,EAAUA,QAAV,4BAA4BV,GAA5B,CAAmCU,OADxB,cAE/BhC,GAAuB,SAACsB,EAAD,OAAUU,EAAV,EAAUA,QAAV,OACtBV,EAAME,QAAO,SAAAP,GAAO,OAAIA,EAAQgB,KAAOD,QAHT,cAI/BtC,GAAsB,SAACwC,EAAD,YAAMF,WAJG,IAO5BG,EAAgBJ,YAAc,GAAD,eAChC7B,GAAe,SAACgC,EAAD,YAAMF,YAQTI,EALSC,YAAgB,CACtCX,MAAOI,EACPN,OAAQW,I,OChBJG,EAAgB,CACpB5B,KAAM,GACNC,OAAQ,IAEJ4B,E,4MAQJjB,M,eAAagB,G,EACbE,aAAe,SAAAC,GACb,MAAwBA,EAAEC,cAAlBhC,EAAR,EAAQA,KAAMiC,EAAd,EAAcA,MACd,EAAKC,UAAS,SAAAC,GAAI,kCACbA,GADa,kBAEfnC,EAAOiC,Q,EAGZG,aAAe,SAAAL,GACbA,EAAEM,iBACF,EAAKC,MAAMC,SAAS,EAAK3B,OACzB,EAAK4B,S,EAEPA,MAAQ,WACN,EAAKN,SAAL,eAAmBN,K,4CAErB,WACE,MAAyBa,KAAK7B,MAAtBZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,uBAAMsC,SAAUE,KAAKL,aAAcM,UAAWC,IAAOC,YAArD,UACE,wBAAOF,UAAWC,IAAOE,MAAzB,iBAEE,uBACEH,UAAWC,IAAOG,MAClBC,KAAK,OACL/C,KAAK,OACLiC,MAAOjC,EACPgD,YAAY,aACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUX,KAAKX,kBAGnB,wBAAOY,UAAWC,IAAOE,MAAzB,mBAEE,uBACEH,UAAWC,IAAOG,MAClBC,KAAK,MACL/C,KAAK,SACLgD,YAAY,YACZf,MAAOhC,EACPgD,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUX,KAAKX,kBAGnB,wBAAQiB,KAAK,SAASL,UAAWC,IAAOU,cAAxC,gC,GAxDkBC,aAqEXC,cAAQ,MALI,SAAA3D,GAAQ,MAAK,CACtC2C,SAAU,gBAAGvC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACRL,EAAS4D,EAA8B,CAAExD,OAAMC,gBAGpCsD,CAAkC1B,G,iBC/ClC0B,eANS,SAAA3C,GAAK,MAAK,CAChCqB,MAAOwB,EAAkB9C,UAAUC,OAEV,SAAAhB,GAAQ,MAAK,CACtCwD,SAAU,SAAArB,GAAC,OAAInC,EAASJ,EAAauC,EAAE2B,OAAOzB,YAEjCsB,EA1BA,SAAC,GAAyB,IAAvBtB,EAAsB,EAAtBA,MAAOmB,EAAe,EAAfA,SACvB,OACE,qBAAKV,UAAWC,IAAO7B,OAAvB,SACE,wBAAO4B,UAAWC,IAAOE,MAAzB,kCAEE,uBACEE,KAAK,OACLL,UAAWC,IAAOG,MAClBb,MAAOA,EACPmB,SAAUA,Y,qCCULG,eAAQ,MAHI,SAAA3D,GAAQ,MAAK,CACtC+D,SAAU,SAAApC,GAAE,OAAI3B,EAAS4D,EAAiCjC,QAE7CgC,EApBK,SAAC,GAAD,IAAGhC,EAAH,EAAGA,GAAIvB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQ0D,EAArB,EAAqBA,SAArB,OAClB,qBAAI3D,KAAMA,EAAMC,OAAQA,EAAQyC,UAAWC,KAAOiB,YAAlD,UACG5D,EADH,IACS,sBAAM0C,UAAWC,KAAOkB,YAAxB,SAAsC5D,IAC7C,wBACE8C,KAAK,SACLL,UAAWC,KAAOmB,iBAClBC,QAAS,kBAAMJ,EAASpC,IAH1B,0BCaWgC,gBAJS,SAAA3C,GAAK,MAAK,CAChCC,SAAU4C,EAAkBxC,mBAAmBL,MAGlC2C,EAfK,SAAC,GAAD,IAAG1C,EAAH,EAAGA,SAAH,OAClB,oBAAI6B,UAAWC,IAAOqB,aAAtB,SACGnD,EAASX,KAAI,gBAAGqB,EAAH,EAAGA,GAAIvB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,cAAC,GAAD,CAAsBsB,GAAIA,EAAIvB,KAAMA,EAAMC,OAAQA,GAAhCsB,WCAlB0C,I,6KACJ,WACExB,KAAKH,MAAM4B,kB,oBAEb,WACE,OACE,sBAAKxB,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,uBACA,cAAC,EAAD,IACA,oBAAIA,UAAU,QAAd,sBACA,cAAC,EAAD,IACA,cAAC,GAAD,W,GAXUY,cAoBHC,eAAQ,MAJI,SAAA3D,GAAQ,MAAK,CACtCsE,cAAe,kBAAMtE,EAASuE,SAGjBZ,CAAkCU,I,6BCjB3CG,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAUaC,GARDC,YAAe,CAC3BC,QAAS,CACPpE,SAAUa,GAEZ0C,cACAc,UAAUC,IClBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJQ,SAASC,eAAe,U,kBCZ1B5G,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,MAAQ,2BAA2B,cAAgB,sC","file":"static/js/main.3fb109e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3Z2II\",\"label\":\"Filter_label__yVS95\",\"input\":\"Filter_input__1A_bt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneNumber\":\"ContactItem_phoneNumber__xWZC9\",\"contactItem\":\"ContactItem_contactItem__2fdaa\",\"contactDeleteBtn\":\"ContactItem_contactDeleteBtn__1S9H8\",\"ring\":\"ContactItem_ring__3xwRr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__M3Pmm\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/filter');\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n  fetchContactSuccess,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\n// const addContact =\r\n//   ({ name, number }) =>\r\n//   dispatch => {\r\n//     const contact = { name, number };\r\n//     dispatch(addContactRequest());\r\n//     axios\r\n//       .post('/contacts', contact)\r\n//       .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//       .catch(error => dispatch(addContactError(error)));\r\n//   };\r\n// const deleteContact = contactId => dispatch => {\r\n//   dispatch(deleteContactRequest());\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch(error => dispatch(deleteContactError(error)));\r\n// };\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  async dispatch => {\r\n    const { data } = await axios.get('/contacts');\r\n    if (\r\n      data.map(item => item.name.toLowerCase()).includes(name.toLowerCase())\r\n    ) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactError(error));\r\n    }\r\n  };\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default { getFilter, getContacts, getVisibleContacts };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n  fetchContactSuccess,\r\n} from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.scss';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\nclass ContactForm extends Component {\n  static propTypes = {\n    INITIAL_STATE: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n    onSubmit: PropTypes.func,\n  };\n  state = { ...INITIAL_STATE };\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\n        <label className={styles.label}>\n          Name\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"input name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={styles.label}>\n          Number\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"XXX-XX-XX\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={styles.addContactBtn}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.scss';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={styles.filter}>\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          type=\"text\"\n          className={styles.input}\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport styles from './ContactItem.module.scss';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li name={name} number={number} className={styles.contactItem}>\n    {name}:<span className={styles.phoneNumber}>{number}</span>\n    <button\n      type=\"button\"\n      className={styles.contactDeleteBtn}\n      onClick={() => onDelete(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func,\n};\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\nexport default connect(null, mapDispatchToProps)(ContactItem);\n","import styles from './ContactList.module.scss';\nimport ContactItem from '../ContactItem';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst ContactList = ({ contacts }) => (\n  <ul className={styles.contactsList}>\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem key={id} id={id} name={name} number={number} />\n    ))}\n  </ul>\n);\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport { connect } from 'react-redux';\nimport contactsOprations from './redux/contacts/contacts-operations';\n\nimport './styles.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Phonebook</h1>\n        <ContactForm />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOprations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './contacts';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__blsyL\",\"label\":\"ContactForm_label__3d7tQ\",\"input\":\"ContactForm_input__29b0P\",\"addContactBtn\":\"ContactForm_addContactBtn__2F1n3\"};"],"sourceRoot":""}