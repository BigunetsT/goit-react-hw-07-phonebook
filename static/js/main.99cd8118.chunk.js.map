{"version":3,"sources":["components/Filter/Filter.module.scss","components/ContactItem/ContactItem.module.scss","components/ContactList/ContactList.module.scss","helpers/edit-number.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","helpers/getVisibleContacts.js","components/ContactList/ContactList.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","editNumber","string","slice","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","INITIAL_STATE","ContactForm","state","handleChange","e","currentTarget","value","setState","prev","handleSubmit","preventDefault","props","onSubmit","reset","this","className","styles","contactForm","label","input","type","placeholder","pattern","title","required","onChange","addContactBtn","Component","connect","contactsOperations","contacts","filter","contactsAction","target","onDelete","id","contactItem","phoneNumber","contactDeleteBtn","onClick","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","includes","items","contactsList","map","App","fetchContacts","contactsOprations","itemsReducer","createReducer","payload","item","toLocaleLowerCase","alert","_","filterReducer","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99cd8118.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3Z2II\",\"label\":\"Filter_label__yVS95\",\"input\":\"Filter_input__1A_bt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneNumber\":\"ContactItem_phoneNumber__xWZC9\",\"contactItem\":\"ContactItem_contactItem__2fdaa\",\"contactDeleteBtn\":\"ContactItem_contactDeleteBtn__1S9H8\",\"ring\":\"ContactItem_ring__3xwRr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__M3Pmm\"};","function editNumber(string) {\r\n  return (\r\n    string.slice(0, 3) + '-' + string.slice(3, 5) + '-' + string.slice(5, 7)\r\n  );\r\n}\r\n\r\nexport default editNumber;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContact = createAction('contacts/filter');\r\n","import axios from 'axios';\r\nimport editNumber from '../../helpers/edit-number';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n  fetchContactSuccess,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = { name, number: editNumber(number) };\r\n    dispatch(addContactRequest());\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.scss';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\nclass ContactForm extends Component {\n  static propTypes = {\n    INITIAL_STATE: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n    onSubmit: PropTypes.func,\n  };\n  state = { ...INITIAL_STATE };\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\n        <label className={styles.label}>\n          Name\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"input name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={styles.label}>\n          Number\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"XXX-XX-XX\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={styles.addContactBtn}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.scss';\nimport { connect } from 'react-redux';\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={styles.filter}>\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          type=\"text\"\n          className={styles.input}\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsAction.filterContact(e.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport styles from './ContactItem.module.scss';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li name={name} number={number} className={styles.contactItem}>\n    {name}:<span className={styles.phoneNumber}>{number}</span>\n    <button\n      type=\"button\"\n      className={styles.contactDeleteBtn}\n      onClick={() => onDelete(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func,\n};\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\nexport default connect(null, mapDispatchToProps)(ContactItem);\n","const getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\nexport default getVisibleContacts;\r\n","import styles from './ContactList.module.scss';\nimport ContactItem from '../ContactItem';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport getVisibleContacts from '../../helpers/getVisibleContacts';\n\nconst ContactList = ({ contacts }) => (\n  <ul className={styles.contactsList}>\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem key={id} id={id} name={name} number={number} />\n    ))}\n  </ul>\n);\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func,\n};\nconst mapStateToProps = state => {\n  const { items, filter } = state.contacts;\n  const visibleContacts = getVisibleContacts(items, filter);\n  return {\n    contacts: visibleContacts,\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport { connect } from 'react-redux';\nimport contactsOprations from './redux/contacts/contacts-operations';\n\nimport './styles.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Phonebook</h1>\n        <ContactForm />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOprations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContact,\r\n  fetchContactSuccess,\r\n} from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [addContactSuccess]: (state, { payload }) =>\r\n    state\r\n      .map(item => item.name.toLocaleLowerCase())\r\n      .includes(payload.name.toLocaleLowerCase())\r\n      ? alert(`${payload.name} is already in contacts.`)\r\n      : [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__blsyL\",\"label\":\"ContactForm_label__3d7tQ\",\"input\":\"ContactForm_input__29b0P\",\"addContactBtn\":\"ContactForm_addContactBtn__2F1n3\"};"],"sourceRoot":""}